[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "인덱스",
    "section": "",
    "text": "이 페이지는 인덱스다."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index_proj.html",
    "href": "index_proj.html",
    "title": "희희희~",
    "section": "",
    "text": "군집화\n\n\n\n\n\n\n\nPython\n\n\nipynb\n\n\n\n\n하수구 위치, 표고(지형) 데이터를 사용한 군집화\n\n\n\n\n\n\nApr 24, 2024\n\n\nSungil_Park\n\n\n\n\n\n\n  \n\n\n\n\nproj_2\n\n\n\n\n\n\n\nPython\n\n\nipynb\n\n\n\n\n단단한 나무껍질\n\n\n\n\n\n\nApr 24, 2024\n\n\n나무껍질가이즈\n\n\n\n\n\n\n  \n\n\n\n\nproj_1\n\n\n\n\n\n\n\nR\n\n\nQMD\n\n\n\n\n단단한 나무껍질\n\n\n\n\n\n\nApr 22, 2024\n\n\n나무껍질가이즈\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/proj_1.html",
    "href": "posts/proj_1.html",
    "title": "proj_1",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nmpg %&gt;% \n  ggplot(mapping = aes(x=class, y=hwy, fill=class))+\n  geom_boxplot() +\n  theme_minimal()"
  },
  {
    "objectID": "index.html#희희",
    "href": "index.html#희희",
    "title": "최희승 블로그 만드는거 도와주기",
    "section": "희희",
    "text": "희희"
  },
  {
    "objectID": "posts/proj_2.html",
    "href": "posts/proj_2.html",
    "title": "proj_2",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nprint(\"pandas :\", pd.__version__)\nprint(\"numpy :\" , np.__version__)\n\npandas : 1.5.3\nnumpy : 1.26.2\n\n\n\n\nnp.random.seed(0)\ndates = pd.date_range('20240101', periods=10)\ndata = pd.DataFrame(np.random.randn(10, 4), index=dates, columns=list('ABCD'))\n\nprint(data)\n\n\ndata.plot()\nplt.title('Random Data Visualization')\nplt.xlabel('Date')\nplt.ylabel('Values')\nplt.show()\n\n                   A         B         C         D\n2024-01-01  1.764052  0.400157  0.978738  2.240893\n2024-01-02  1.867558 -0.977278  0.950088 -0.151357\n2024-01-03 -0.103219  0.410599  0.144044  1.454274\n2024-01-04  0.761038  0.121675  0.443863  0.333674\n2024-01-05  1.494079 -0.205158  0.313068 -0.854096\n2024-01-06 -2.552990  0.653619  0.864436 -0.742165\n2024-01-07  2.269755 -1.454366  0.045759 -0.187184\n2024-01-08  1.532779  1.469359  0.154947  0.378163\n2024-01-09 -0.887786 -1.980796 -0.347912  0.156349\n2024-01-10  1.230291  1.202380 -0.387327 -0.302303"
  },
  {
    "objectID": "index.html#이-페이지는-인덱스다.-1",
    "href": "index.html#이-페이지는-인덱스다.-1",
    "title": "인덱스",
    "section": "",
    "text": "이 페이지는 인덱스다."
  },
  {
    "objectID": "posts/proj_3.html",
    "href": "posts/proj_3.html",
    "title": "군집화",
    "section": "",
    "text": "import pandas as pd\nimport geopandas as gpd\nfrom sklearn.cluster import KMeans\nimport folium\nfrom folium import CircleMarker\nfrom shapely.geometry import Point\n\ndata_raw = pd.read_csv(\"/home/sungil/Income_pred_Dacon/PersonalProj/완_하수구_위치_정보.csv\")\ndata = data_raw[[\"lat\",\"lon\"]].copy()\n\ngeometry = [Point(lon, lat) for lon, lat in zip(data_raw['lon'], data_raw['lat'])]\n\ndata_raw = gpd.GeoDataFrame(data_raw, geometry=geometry)\n\ndata_raw.crs= 'EPSG:4326'\ndata_raw.head()\n\n\n\n\n\n\n\n\n수위계번호\n수위계 설치지점\n박스높이(m)\nlat\nlon\ngeometry\n\n\n\n\n0\n23-0001\n강남구 압구정로20길 6앞 맨홀&lt;심덕빌딩(최용섭피부과)앞~백상빌딩간 횡단보도내&gt;\n2.0\n37.524714\n127.024854\nPOINT (127.02485 37.52471)\n\n\n1\n23-0002\n강남구 압구정로128앞 맨홀(신사동주민센터앞 횡단보도내, 현대고 서측정문앞)\n2.0\n37.524144\n127.022466\nPOINT (127.02247 37.52414)\n\n\n2\n23-0003\n강남구 남부순환로2947앞(대원빌딩앞 횡단보도내, 대치역사거리)\n2.5\n37.494475\n127.063235\nPOINT (127.06324 37.49448)\n\n\n3\n23-0004\n강남구 삼성로212앞 맨홀(은마아파트1동~미도아파트208동간,중안차로 안전지대내)\n2.5\n37.496052\n127.068492\nPOINT (127.06849 37.49605)\n\n\n4\n23-0005\n테헤란로435앞 맨홀(대종빌딩~삼영빌딩간 횡단보도앞 테헤란로측)\n2.5\n37.506400\n127.055012\nPOINT (127.05501 37.50640)\n\n\n\n\n\n\n\n\n\n\nkmeans = KMeans(n_clusters=3, random_state=42,n_init=10)\nkmeans.fit(data)\nlabels = kmeans.predict(data)\ncentroids = kmeans.cluster_centers_\ndef get_cluster_color(cluster_idx):\n    colors = ['red', 'green', 'blue', 'orange', 'purple', 'yellow', 'pink', 'cyan', 'magenta', 'gray']\n    return colors[cluster_idx % len(colors)]\n\nM = folium.Map(location=[37.50452, 127.055],\n                              zoom_start=13,tiles=\"Cartodb Positron\")\n\nfor idx, row in data_raw.iterrows():\n    cluster_idx = labels[idx]  # 데이터 포인트의 군집 인덱스\n    color = get_cluster_color(cluster_idx) \n\n    CircleMarker(location=[row['lat'], row['lon']],\n                 radius=3,\n                 tooltip=row[\"수위계번호\"],  # 툴팁에 군집 인덱스 표시\n                 color=color,\n                 fill=True,\n                 fill_opacity=1,\n                 opacity=1\n                ).add_to(M)\n\n# Plot Centroids\nfor centroid in centroids:\n    folium.Marker(location=[centroid[0], centroid[1]],\n                  icon=folium.Icon(color='red', icon='info-sign')\n                 ).add_to(M)\n\nM\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\ndata_raw[\"label\"] = labels\ndata_raw[[\"수위계번호\",\"label\"]].sort_values(\"label\")\n\n\n\n\n\n\n\n\n수위계번호\nlabel\n\n\n\n\n0\n23-0001\n0\n\n\n1\n23-0002\n0\n\n\n6\n23-0007\n0\n\n\n4\n23-0005\n0\n\n\n7\n23-0008\n0\n\n\n10\n23-0011\n0\n\n\n9\n23-0010\n0\n\n\n8\n23-0009\n0\n\n\n12\n23-0013\n0\n\n\n11\n23-0012\n0\n\n\n2\n23-0003\n1\n\n\n3\n23-0004\n1\n\n\n14\n23-0015\n1\n\n\n13\n23-0014\n1\n\n\n15\n23-0016\n1\n\n\n16\n23-0017\n1\n\n\n20\n23-0021\n1\n\n\n17\n23-0018\n1\n\n\n18\n23-0019\n1\n\n\n19\n23-0020\n1\n\n\n5\n23-0006\n2\n\n\n21\n22-0007\n2\n\n\n22\n22-0010\n2\n\n\n23\n22-0011\n2\n\n\n24\n22-0012\n2\n\n\n25\n22-0013\n2\n\n\n26\n22-0014\n2\n\n\n\n\n\n\n\n\n\n\n\nkmeans = KMeans(n_clusters=4, random_state=42,n_init=10)\nkmeans.fit(data)\nlabels = kmeans.predict(data)\ncentroids = kmeans.cluster_centers_\ndef get_cluster_color(cluster_idx):\n    colors = ['red', 'green', 'blue', 'orange', 'purple', 'yellow', 'pink', 'cyan', 'magenta', 'gray']\n    return colors[cluster_idx % len(colors)]\n\nM = folium.Map(location=[37.50452, 127.055],\n                              zoom_start=13,tiles=\"Cartodb Positron\")\n\nfor idx, row in data_raw.iterrows():\n    cluster_idx = labels[idx]  # 데이터 포인트의 군집 인덱스\n    color = get_cluster_color(cluster_idx) \n\n    CircleMarker(location=[row['lat'], row['lon']],\n                 radius=3,\n                 tooltip=row[\"수위계번호\"],  # 툴팁에 군집 인덱스 표시\n                 color=color,\n                 fill=True,\n                 fill_opacity=1,\n                 opacity=1\n                ).add_to(M)\n\n# Plot Centroids\nfor centroid in centroids:\n    folium.Marker(location=[centroid[0], centroid[1]],\n                  icon=folium.Icon(color='red', icon='info-sign')\n                 ).add_to(M)\n\nM\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\ndata_raw[\"label\"] = labels\ndata_raw[[\"수위계번호\",\"label\"]].sort_values(\"label\")\n\n\n\n\n\n\n\n\n수위계번호\nlabel\n\n\n\n\n0\n23-0001\n0\n\n\n1\n23-0002\n0\n\n\n6\n23-0007\n0\n\n\n7\n23-0008\n0\n\n\n11\n23-0012\n0\n\n\n10\n23-0011\n0\n\n\n9\n23-0010\n0\n\n\n8\n23-0009\n0\n\n\n12\n23-0013\n0\n\n\n13\n23-0014\n1\n\n\n14\n23-0015\n1\n\n\n15\n23-0016\n1\n\n\n19\n23-0020\n1\n\n\n18\n23-0019\n1\n\n\n17\n23-0018\n1\n\n\n16\n23-0017\n1\n\n\n20\n23-0021\n1\n\n\n25\n22-0013\n2\n\n\n26\n22-0014\n2\n\n\n5\n23-0006\n2\n\n\n24\n22-0012\n2\n\n\n21\n22-0007\n2\n\n\n22\n22-0010\n2\n\n\n23\n22-0011\n2\n\n\n3\n23-0004\n3\n\n\n2\n23-0003\n3\n\n\n4\n23-0005\n3\n\n\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nk_range = range(1, 10)\ninertia = []\n\nfor k in k_range:\n    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)\n    kmeans.fit(data)\n    inertia.append(kmeans.inertia_)\n\nplt.plot(k_range, inertia, marker='o')\nplt.xlabel('Number of Clusters (k)')\nplt.ylabel('Inertia')\nplt.title('Elbow Method for Optimal k')\nplt.xticks(k_range)\nplt.show()"
  },
  {
    "objectID": "posts/proj_3.html#하수구-위경도만으로-군집화",
    "href": "posts/proj_3.html#하수구-위경도만으로-군집화",
    "title": "군집화",
    "section": "",
    "text": "import pandas as pd\nimport geopandas as gpd\nfrom sklearn.cluster import KMeans\nimport folium\nfrom folium import CircleMarker\nfrom shapely.geometry import Point\n\ndata_raw = pd.read_csv(\"/home/sungil/Income_pred_Dacon/PersonalProj/완_하수구_위치_정보.csv\")\ndata = data_raw[[\"lat\",\"lon\"]].copy()\n\ngeometry = [Point(lon, lat) for lon, lat in zip(data_raw['lon'], data_raw['lat'])]\n\ndata_raw = gpd.GeoDataFrame(data_raw, geometry=geometry)\n\ndata_raw.crs= 'EPSG:4326'\ndata_raw.head()\n\n\n\n\n\n\n\n\n수위계번호\n수위계 설치지점\n박스높이(m)\nlat\nlon\ngeometry\n\n\n\n\n0\n23-0001\n강남구 압구정로20길 6앞 맨홀&lt;심덕빌딩(최용섭피부과)앞~백상빌딩간 횡단보도내&gt;\n2.0\n37.524714\n127.024854\nPOINT (127.02485 37.52471)\n\n\n1\n23-0002\n강남구 압구정로128앞 맨홀(신사동주민센터앞 횡단보도내, 현대고 서측정문앞)\n2.0\n37.524144\n127.022466\nPOINT (127.02247 37.52414)\n\n\n2\n23-0003\n강남구 남부순환로2947앞(대원빌딩앞 횡단보도내, 대치역사거리)\n2.5\n37.494475\n127.063235\nPOINT (127.06324 37.49448)\n\n\n3\n23-0004\n강남구 삼성로212앞 맨홀(은마아파트1동~미도아파트208동간,중안차로 안전지대내)\n2.5\n37.496052\n127.068492\nPOINT (127.06849 37.49605)\n\n\n4\n23-0005\n테헤란로435앞 맨홀(대종빌딩~삼영빌딩간 횡단보도앞 테헤란로측)\n2.5\n37.506400\n127.055012\nPOINT (127.05501 37.50640)\n\n\n\n\n\n\n\n\n\n\nkmeans = KMeans(n_clusters=3, random_state=42,n_init=10)\nkmeans.fit(data)\nlabels = kmeans.predict(data)\ncentroids = kmeans.cluster_centers_\ndef get_cluster_color(cluster_idx):\n    colors = ['red', 'green', 'blue', 'orange', 'purple', 'yellow', 'pink', 'cyan', 'magenta', 'gray']\n    return colors[cluster_idx % len(colors)]\n\nM = folium.Map(location=[37.50452, 127.055],\n                              zoom_start=13,tiles=\"Cartodb Positron\")\n\nfor idx, row in data_raw.iterrows():\n    cluster_idx = labels[idx]  # 데이터 포인트의 군집 인덱스\n    color = get_cluster_color(cluster_idx) \n\n    CircleMarker(location=[row['lat'], row['lon']],\n                 radius=3,\n                 tooltip=row[\"수위계번호\"],  # 툴팁에 군집 인덱스 표시\n                 color=color,\n                 fill=True,\n                 fill_opacity=1,\n                 opacity=1\n                ).add_to(M)\n\n# Plot Centroids\nfor centroid in centroids:\n    folium.Marker(location=[centroid[0], centroid[1]],\n                  icon=folium.Icon(color='red', icon='info-sign')\n                 ).add_to(M)\n\nM\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\ndata_raw[\"label\"] = labels\ndata_raw[[\"수위계번호\",\"label\"]].sort_values(\"label\")\n\n\n\n\n\n\n\n\n수위계번호\nlabel\n\n\n\n\n0\n23-0001\n0\n\n\n1\n23-0002\n0\n\n\n6\n23-0007\n0\n\n\n4\n23-0005\n0\n\n\n7\n23-0008\n0\n\n\n10\n23-0011\n0\n\n\n9\n23-0010\n0\n\n\n8\n23-0009\n0\n\n\n12\n23-0013\n0\n\n\n11\n23-0012\n0\n\n\n2\n23-0003\n1\n\n\n3\n23-0004\n1\n\n\n14\n23-0015\n1\n\n\n13\n23-0014\n1\n\n\n15\n23-0016\n1\n\n\n16\n23-0017\n1\n\n\n20\n23-0021\n1\n\n\n17\n23-0018\n1\n\n\n18\n23-0019\n1\n\n\n19\n23-0020\n1\n\n\n5\n23-0006\n2\n\n\n21\n22-0007\n2\n\n\n22\n22-0010\n2\n\n\n23\n22-0011\n2\n\n\n24\n22-0012\n2\n\n\n25\n22-0013\n2\n\n\n26\n22-0014\n2\n\n\n\n\n\n\n\n\n\n\n\nkmeans = KMeans(n_clusters=4, random_state=42,n_init=10)\nkmeans.fit(data)\nlabels = kmeans.predict(data)\ncentroids = kmeans.cluster_centers_\ndef get_cluster_color(cluster_idx):\n    colors = ['red', 'green', 'blue', 'orange', 'purple', 'yellow', 'pink', 'cyan', 'magenta', 'gray']\n    return colors[cluster_idx % len(colors)]\n\nM = folium.Map(location=[37.50452, 127.055],\n                              zoom_start=13,tiles=\"Cartodb Positron\")\n\nfor idx, row in data_raw.iterrows():\n    cluster_idx = labels[idx]  # 데이터 포인트의 군집 인덱스\n    color = get_cluster_color(cluster_idx) \n\n    CircleMarker(location=[row['lat'], row['lon']],\n                 radius=3,\n                 tooltip=row[\"수위계번호\"],  # 툴팁에 군집 인덱스 표시\n                 color=color,\n                 fill=True,\n                 fill_opacity=1,\n                 opacity=1\n                ).add_to(M)\n\n# Plot Centroids\nfor centroid in centroids:\n    folium.Marker(location=[centroid[0], centroid[1]],\n                  icon=folium.Icon(color='red', icon='info-sign')\n                 ).add_to(M)\n\nM\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\ndata_raw[\"label\"] = labels\ndata_raw[[\"수위계번호\",\"label\"]].sort_values(\"label\")\n\n\n\n\n\n\n\n\n수위계번호\nlabel\n\n\n\n\n0\n23-0001\n0\n\n\n1\n23-0002\n0\n\n\n6\n23-0007\n0\n\n\n7\n23-0008\n0\n\n\n11\n23-0012\n0\n\n\n10\n23-0011\n0\n\n\n9\n23-0010\n0\n\n\n8\n23-0009\n0\n\n\n12\n23-0013\n0\n\n\n13\n23-0014\n1\n\n\n14\n23-0015\n1\n\n\n15\n23-0016\n1\n\n\n19\n23-0020\n1\n\n\n18\n23-0019\n1\n\n\n17\n23-0018\n1\n\n\n16\n23-0017\n1\n\n\n20\n23-0021\n1\n\n\n25\n22-0013\n2\n\n\n26\n22-0014\n2\n\n\n5\n23-0006\n2\n\n\n24\n22-0012\n2\n\n\n21\n22-0007\n2\n\n\n22\n22-0010\n2\n\n\n23\n22-0011\n2\n\n\n3\n23-0004\n3\n\n\n2\n23-0003\n3\n\n\n4\n23-0005\n3\n\n\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nk_range = range(1, 10)\ninertia = []\n\nfor k in k_range:\n    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)\n    kmeans.fit(data)\n    inertia.append(kmeans.inertia_)\n\nplt.plot(k_range, inertia, marker='o')\nplt.xlabel('Number of Clusters (k)')\nplt.ylabel('Inertia')\nplt.title('Elbow Method for Optimal k')\nplt.xticks(k_range)\nplt.show()"
  },
  {
    "objectID": "posts/proj_3.html#표고지형-데이터-병합하기",
    "href": "posts/proj_3.html#표고지형-데이터-병합하기",
    "title": "군집화",
    "section": "표고(지형) 데이터 병합하기",
    "text": "표고(지형) 데이터 병합하기\n\nimport geopandas as gpd\n\ndata_raw = pd.read_csv(\"/home/sungil/Income_pred_Dacon/PersonalProj/완_하수구_위치_정보.csv\")\ngeometry = [Point(lon, lat) for lon, lat in zip(data_raw['lon'], data_raw['lat'])]\ndata_raw = gpd.GeoDataFrame(data_raw, geometry=geometry)\ndata_raw.crs= 'EPSG:4326'\n\npyogo = gpd.read_file(\"~/rawdata/gyeongsa/표고 5000/N3P_F002.shp\")\npyogo.drop([\"UFID\",\"NUME\",\"SCLS\",\"FMTA\"], axis=1, inplace=True) \n\nif pyogo.crs is None:\n    pyogo.set_crs(epsg = 5179, inplace = True)\n    \npyogo = pyogo.to_crs(epsg=4326)\n\nprint(data_raw.crs,pyogo.crs)\npyogo.head()\n\nEPSG:4326 EPSG:4326\n\n\n\n\n\n\n\n\n\nHEIGHT\ngeometry\n\n\n\n\n0\n213.080002\nPOINT (126.92718 37.41191)\n\n\n1\n68.430000\nPOINT (127.08504 37.41257)\n\n\n2\n150.309998\nPOINT (127.07865 37.41256)\n\n\n3\n39.209999\nPOINT (126.90436 37.41182)\n\n\n4\n342.640015\nPOINT (127.04173 37.41244)\n\n\n\n\n\n\n\n\n맨홀센서 위치별 300미터 버퍼 주기\n\nimport random\nimport folium\nfrom folium import  Polygon\n\ndata_raw_utm = data_raw.to_crs('EPSG:32652')  # 예시로 UTM Zone 52N 좌표계를 사용합니다.\n\n# 버퍼 추가\nbuffer_radius = 300\ndata_raw_utm['geometry'] = data_raw_utm['geometry'].buffer(buffer_radius)\n\ndata_raw_buffer = data_raw_utm.to_crs(data_raw.crs)\n# data_raw_buffer.head()\n\nM = folium.Map(location=[37.50452, 127.04899], \n               zoom_start=13,tiles=\"Cartodb Positron\")\n\nfolium.GeoJson(data_raw_buffer, \n               name=\"geojson\").add_to(M)\n\nM\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n맨홀센서 버퍼 안에 드는 표고값\n\njoined_gdf = gpd.sjoin(pyogo,data_raw_buffer, predicate=\"within\")\njoined_gdf.drop([\"수위계 설치지점\"], axis=1, inplace=True)\njoined_gdf.head()\n\n\n\n\n\n\n\n\nHEIGHT\ngeometry\nindex_right\n수위계번호\n박스높이(m)\nlat\nlon\n\n\n\n\n5850\n28.719999\nPOINT (127.09539 37.48277)\n20\n23-0021\n2.6\n37.484353\n127.094982\n\n\n7888\n23.200001\nPOINT (127.09403 37.48400)\n20\n23-0021\n2.6\n37.484353\n127.094982\n\n\n8314\n24.650000\nPOINT (127.09367 37.48376)\n20\n23-0021\n2.6\n37.484353\n127.094982\n\n\n8885\n31.600000\nPOINT (127.09728 37.48350)\n20\n23-0021\n2.6\n37.484353\n127.094982\n\n\n8970\n22.840000\nPOINT (127.09450 37.48385)\n20\n23-0021\n2.6\n37.484353\n127.094982\n\n\n\n\n\n\n\n\njoined_gdf_2 = joined_gdf.groupby('수위계번호').mean().reset_index()\njoined_gdf_2.head()\n\n/tmp/ipykernel_24817/1738235292.py:1: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n  joined_gdf_2 = joined_gdf.groupby('수위계번호').mean().reset_index()\n\n\n\n\n\n\n\n\n\n수위계번호\nHEIGHT\nindex_right\n박스높이(m)\nlat\nlon\n\n\n\n\n0\n22-0007\n16.685000\n21.0\n2.0\n37.494394\n127.028372\n\n\n1\n22-0010\n18.601481\n22.0\n3.0\n37.498114\n127.026919\n\n\n2\n22-0011\n18.190000\n23.0\n2.5\n37.496433\n127.028082\n\n\n3\n22-0012\n16.471220\n24.0\n3.0\n37.498106\n127.022192\n\n\n4\n22-0013\n22.450952\n25.0\n4.4\n37.500400\n127.018828\n\n\n\n\n\n\n\n\n\n표고 포함 군집화\n표준화\n\nfrom sklearn.preprocessing import StandardScaler\njoined_gdf_3 = joined_gdf_2.loc[:,[\"HEIGHT\",\"lat\",\"lon\"]]\n\nscaler = StandardScaler()\nscaled_data = scaler.fit_transform(joined_gdf_3)\nscaled_df = pd.DataFrame(scaled_data, columns=joined_gdf_3.columns)\nscaled_df.head()\n\n\n\n\n\n\n\n\nHEIGHT\nlat\nlon\n\n\n\n\n0\n-0.526674\n-0.593923\n-0.936982\n\n\n1\n-0.332162\n-0.363441\n-0.990645\n\n\n2\n-0.373925\n-0.467592\n-0.947693\n\n\n3\n-0.548372\n-0.363937\n-1.165225\n\n\n4\n0.058538\n-0.221806\n-1.289465\n\n\n\n\n\n\n\n\n\nk = 3\n\nkmeans = KMeans(n_clusters=3, random_state=42,n_init=10)\nkmeans.fit(scaled_df)\nlabels = kmeans.predict(scaled_df)\ncentroids = kmeans.cluster_centers_\n\njoined_gdf_2[\"label\"] = labels\n\ncolor_dict = {0: 'blue', 1: 'green', 2: 'red', 3: 'orange'}\n\nM = folium.Map(location=[37.50452, 127.055],\n                              zoom_start=13,tiles=\"Cartodb Positron\")\n\nfor idx, row in joined_gdf_2.iterrows():\n    cluster_idx = labels[idx]  # 데이터 포인트의 군집 인덱스\n    color = get_cluster_color(cluster_idx) \n\n    CircleMarker(location=[row['lat'], row['lon']],\n                 radius=3,\n                #  tooltip=[row[\"HEIGHT\"]],  # 툴팁에 군집 인덱스 표시\n                 color=color_dict[row[\"label\"]],\n                 fill=True,\n                 fill_opacity=1,\n                 opacity=1,\n                 tooltip=f'수위계번호: {row[\"수위계번호\"]}, 표고: {row[\"HEIGHT\"]}'\n                ).add_to(M)\n\n# Plot Centroids\nfor centroid in centroids:\n    folium.Marker(location=[centroid[0], centroid[1]],\n                  icon=folium.Icon(color='red', icon='info-sign')\n                 ).add_to(M)\n\nM\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\nk = 4\n\nkmeans = KMeans(n_clusters=4, random_state=42,n_init=10)\nkmeans.fit(scaled_df)\nlabels = kmeans.predict(scaled_df)\ncentroids = kmeans.cluster_centers_\n\njoined_gdf_2[\"label\"] = labels\n\ncolor_dict = {0: 'blue', 1: 'green', 2: 'red', 3: 'orange'}\n\nM = folium.Map(location=[37.50452, 127.055],\n                              zoom_start=13,tiles=\"Cartodb Positron\")\n\nfor idx, row in joined_gdf_2.iterrows():\n    cluster_idx = labels[idx]  # 데이터 포인트의 군집 인덱스\n    color = get_cluster_color(cluster_idx) \n\n    CircleMarker(location=[row['lat'], row['lon']],\n                 radius=3,\n                #  tooltip=[row[\"HEIGHT\"]],  # 툴팁에 군집 인덱스 표시\n                 color=color_dict[row[\"label\"]],\n                 fill=True,\n                 fill_opacity=1,\n                 opacity=1,\n                 tooltip=f'수위계번호: {row[\"수위계번호\"]}, 표고: {row[\"HEIGHT\"]}'\n                ).add_to(M)\n\n# Plot Centroids\nfor centroid in centroids:\n    folium.Marker(location=[centroid[0], centroid[1]],\n                  icon=folium.Icon(color='red', icon='info-sign')\n                 ).add_to(M)\n\nM\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nimport matplotlib.pyplot as plt\nk_range = range(1, 10)\ninertia = []\n\nfor k in k_range:\n    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)\n    kmeans.fit(data)\n    inertia.append(kmeans.inertia_)\n\nplt.plot(k_range, inertia, marker='o')\nplt.xlabel('Number of Clusters (k)')\nplt.ylabel('Inertia')\nplt.title('Elbow Method for Optimal k')\nplt.xticks(k_range)\nplt.show()"
  },
  {
    "objectID": "posts/proj_3.html#결론",
    "href": "posts/proj_3.html#결론",
    "title": "군집화",
    "section": "결론",
    "text": "결론\n\n군집 1. 강남역 일대\n23-0006 22-0014 22-0011 22-0010 22-0012 22-0013\n\n\n군집 2. 압구정, 한강변 일대\n23-0002 23-0001 23-0007 23-0008 23-0009 23-0012 23-0011 23-0013"
  },
  {
    "objectID": "posts/proj_4.html",
    "href": "posts/proj_4.html",
    "title": "iframe을 사용해보아요~",
    "section": "",
    "text": "####################  UTM-K to wgs84  ####################\nimport geopandas as gpd\n\ndf = gpd.read_file(\"/home/sungil/Income_pred_Dacon/PersonalProj/emd/emd.shp\",encoding = \"euc-kr\")\n\nif df.crs is None:\n    df.set_crs(epsg = 5179, inplace = True)\n    \nprint(\"Original CRS set to:\", df.crs)\n\ndf_wgs84 = df.to_crs(epsg=4326)\nprint(\"Transformed CRS:\", df_wgs84.crs)\n\n####################  시각화  ####################\nimport random\nimport folium\nfrom folium import  Polygon\n\nunique_names = df['EMD_KOR_NM'].unique()\ncolors = {name: f'#{random.randint(0, 0xFFFFFF):06x}' for name in unique_names}\n\n# 스타일 함수 정의\ndef style_function(feature):\n    name = feature['properties']['EMD_KOR_NM']\n    return {\n        'fillColor': colors[name],\n        'color': 'black',  # 경계선 색상\n        'weight': 1,       # 경계선 두께\n        'fillOpacity': 0.2 # 채우기 불투명도\n    }\n\nM = folium.Map(location=[36.5, 127.04899], \n               zoom_start=7,tiles=\"Cartodb Positron\")\n\n# folium.GeoJson(df_wgs84, \n#                name=\"geojson\",\n#                popup=folium.GeoJsonPopup(fields=['EMD_KOR_NM'], labels=False),\n#                style_function=style_function).add_to(M)\n\nOriginal CRS set to: EPSG:5179\nTransformed CRS: EPSG:4326\n\n\n&lt;folium.features.GeoJson at 0x7f6b9223eb60&gt;"
  },
  {
    "objectID": "posts/군집화하기_ver2.html",
    "href": "posts/군집화하기_ver2.html",
    "title": "군집화",
    "section": "",
    "text": "import pandas as pd\nimport geopandas as gpd\nfrom sklearn.cluster import KMeans\nimport folium\nfrom folium import CircleMarker\nfrom shapely.geometry import Point\n\ndata_raw = pd.read_csv(\"/home/sungil/Income_pred_Dacon/PersonalProj/완_하수구_위치_정보.csv\")\ndata = data_raw[[\"lat\",\"lon\"]].copy()\n\ngeometry = [Point(lon, lat) for lon, lat in zip(data_raw['lon'], data_raw['lat'])]\n\ndata_raw = gpd.GeoDataFrame(data_raw, geometry=geometry)\n\ndata_raw.crs= 'EPSG:4326'\ndata_raw.head()\n\n\n\n\n\n\n\n\n수위계번호\n수위계 설치지점\n박스높이(m)\nlat\nlon\ngeometry\n\n\n\n\n0\n23-0001\n강남구 압구정로20길 6앞 맨홀&lt;심덕빌딩(최용섭피부과)앞~백상빌딩간 횡단보도내&gt;\n2.0\n37.524714\n127.024854\nPOINT (127.02485 37.52471)\n\n\n1\n23-0002\n강남구 압구정로128앞 맨홀(신사동주민센터앞 횡단보도내, 현대고 서측정문앞)\n2.0\n37.524144\n127.022466\nPOINT (127.02247 37.52414)\n\n\n2\n23-0003\n강남구 남부순환로2947앞(대원빌딩앞 횡단보도내, 대치역사거리)\n2.5\n37.494475\n127.063235\nPOINT (127.06324 37.49448)\n\n\n3\n23-0004\n강남구 삼성로212앞 맨홀(은마아파트1동~미도아파트208동간,중안차로 안전지대내)\n2.5\n37.496052\n127.068492\nPOINT (127.06849 37.49605)\n\n\n4\n23-0005\n테헤란로435앞 맨홀(대종빌딩~삼영빌딩간 횡단보도앞 테헤란로측)\n2.5\n37.506400\n127.055012\nPOINT (127.05501 37.50640)\n\n\n\n\n\n\n\n\nkmeans = KMeans(n_clusters=4, random_state=42,n_init=10)\nkmeans.fit(data)\nlabels = kmeans.predict(data)\ncentroids = kmeans.cluster_centers_\ndef get_cluster_color(cluster_idx):\n    colors = ['red', 'green', 'blue', 'orange', 'purple', 'yellow', 'pink', 'cyan', 'magenta', 'gray']\n    return colors[cluster_idx % len(colors)]\n\nM = folium.Map(location=[37.50452, 127.055],\n                              zoom_start=13,tiles=\"Cartodb Positron\")\n\nfor idx, row in data_raw.iterrows():\n    cluster_idx = labels[idx]  # 데이터 포인트의 군집 인덱스\n    color = get_cluster_color(cluster_idx) \n\n    CircleMarker(location=[row['lat'], row['lon']],\n                 radius=3,\n                 tooltip=row[\"수위계번호\"],  # 툴팁에 군집 인덱스 표시\n                 color=color,\n                 fill=True,\n                 fill_opacity=1,\n                 opacity=1\n                ).add_to(M)\n\n# Plot Centroids\nfor centroid in centroids:\n    folium.Marker(location=[centroid[0], centroid[1]],\n                  icon=folium.Icon(color='red', icon='info-sign')\n                 ).add_to(M)\n\nM\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nimport matplotlib.pyplot as plt\nk_range = range(1, 10)\ninertia = []\n\nfor k in k_range:\n    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)\n    kmeans.fit(data)\n    inertia.append(kmeans.inertia_)\n\nplt.plot(k_range, inertia, marker='o')\nplt.xlabel('Number of Clusters (k)')\nplt.ylabel('Inertia')\nplt.title('Elbow Method for Optimal k')\nplt.xticks(k_range)\nplt.show()"
  },
  {
    "objectID": "posts/군집화하기_ver2.html#표고-데이터-병합하기",
    "href": "posts/군집화하기_ver2.html#표고-데이터-병합하기",
    "title": "군집화",
    "section": "표고 데이터 병합하기",
    "text": "표고 데이터 병합하기\n\nimport geopandas as gpd\npyogo = gpd.read_file(\"~/rawdata/gyeongsa/표고 5000/N3P_F002.shp\")\npyogo.drop([\"UFID\",\"NUME\",\"SCLS\",\"FMTA\"], axis=1, inplace=True) \n\nif pyogo.crs is None:\n    pyogo.set_crs(epsg = 5179, inplace = True)\n    \nprint(\"Original CRS set to:\", pyogo.crs)\n\npyogo = pyogo.to_crs(epsg=4326)\nprint(\"Transformed CRS:\", pyogo.crs)\npyogo.head()\n\nOriginal CRS set to: EPSG:5174\nTransformed CRS: EPSG:4326\n\n\n\n\n\n\n\n\n\nHEIGHT\ngeometry\n\n\n\n\n0\n213.080002\nPOINT (126.92718 37.41191)\n\n\n1\n68.430000\nPOINT (127.08504 37.41257)\n\n\n2\n150.309998\nPOINT (127.07865 37.41256)\n\n\n3\n39.209999\nPOINT (126.90436 37.41182)\n\n\n4\n342.640015\nPOINT (127.04173 37.41244)\n\n\n\n\n\n\n\n\nimport random\nimport folium\nfrom folium import  Polygon\n\ndata_raw_utm = data_raw.to_crs('EPSG:32652')  # 예시로 UTM Zone 52N 좌표계를 사용합니다.\n\n# 버퍼 추가\nbuffer_radius = 300\ndata_raw_utm['geometry'] = data_raw_utm['geometry'].buffer(buffer_radius)\n\ndata_raw_buffer = data_raw_utm.to_crs(data_raw.crs)\n# data_raw_buffer.head()\n\nM = folium.Map(location=[37.50452, 127.04899], \n               zoom_start=13,tiles=\"Cartodb Positron\")\n\nfolium.GeoJson(data_raw_buffer, \n               name=\"geojson\").add_to(M)\n\nM\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\njoined_gdf = gpd.sjoin(pyogo,data_raw_buffer, predicate=\"within\")\njoined_gdf.drop([\"수위계 설치지점\"], axis=1, inplace=True)\njoined_gdf.head()\n\n\n\n\n\n\n\n\nHEIGHT\ngeometry\nindex_right\n수위계번호\n박스높이(m)\nlat\nlon\n\n\n\n\n5850\n28.719999\nPOINT (127.09539 37.48277)\n20\n23-0021\n2.6\n37.484353\n127.094982\n\n\n7888\n23.200001\nPOINT (127.09403 37.48400)\n20\n23-0021\n2.6\n37.484353\n127.094982\n\n\n8314\n24.650000\nPOINT (127.09367 37.48376)\n20\n23-0021\n2.6\n37.484353\n127.094982\n\n\n8885\n31.600000\nPOINT (127.09728 37.48350)\n20\n23-0021\n2.6\n37.484353\n127.094982\n\n\n8970\n22.840000\nPOINT (127.09450 37.48385)\n20\n23-0021\n2.6\n37.484353\n127.094982\n\n\n\n\n\n\n\n\njoined_gdf.dtypes\n\nHEIGHT          float64\ngeometry       geometry\nindex_right       int64\n수위계번호            object\n박스높이(m)         float64\nlat             float64\nlon             float64\ndtype: object\n\n\n\njoined_gdf_2 = joined_gdf.groupby('수위계번호').mean().reset_index()\njoined_gdf_2.head()\n\n/tmp/ipykernel_19905/1738235292.py:1: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n  joined_gdf_2 = joined_gdf.groupby('수위계번호').mean().reset_index()\n\n\n\n\n\n\n\n\n\n수위계번호\nHEIGHT\nindex_right\n박스높이(m)\nlat\nlon\n\n\n\n\n0\n22-0007\n16.685000\n21.0\n2.0\n37.494394\n127.028372\n\n\n1\n22-0010\n18.601481\n22.0\n3.0\n37.498114\n127.026919\n\n\n2\n22-0011\n18.190000\n23.0\n2.5\n37.496433\n127.028082\n\n\n3\n22-0012\n16.471220\n24.0\n3.0\n37.498106\n127.022192\n\n\n4\n22-0013\n22.450952\n25.0\n4.4\n37.500400\n127.018828\n\n\n\n\n\n\n\n\nfrom folium import CircleMarker\n\nM = folium.Map(location=[37.50452, 127.04899], \n               zoom_start=13,tiles=\"Cartodb Positron\")\n\nfor idx,row in joined_gdf_2.iterrows():\n    CircleMarker(location=[row[\"lat\"],row[\"lon\"]],\n                 radius=3,\n                 tooltip=row[\"HEIGHT\"],  # 툴팁에 군집 인덱스 표시\n                 fill=True,\n                 fill_opacity=1,\n                 opacity=1\n                ).add_to(M)\n\n\nM\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nM = folium.Map(location=[37.50452, 127.04899], \n               zoom_start=13,tiles=\"Cartodb Positron\")\n\nfolium.GeoJson(data_raw_buffer, \n               name=\"geojson\").add_to(M)\n\nfolium.GeoJson(joined_gdf, \n               name=\"geojson\").add_to(M)\n\nM\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "posts/군집화하기_ver2.html#표고-포함-군집화",
    "href": "posts/군집화하기_ver2.html#표고-포함-군집화",
    "title": "군집화",
    "section": "표고 포함 군집화",
    "text": "표고 포함 군집화\n\njoined_gdf_3 = joined_gdf_2.loc[:,[\"HEIGHT\",\"lat\",\"lon\"]]\njoined_gdf_3.head()\n\n\n\n\n\n\n\n\nHEIGHT\nlat\nlon\n\n\n\n\n0\n16.685000\n37.494394\n127.028372\n\n\n1\n18.601481\n37.498114\n127.026919\n\n\n2\n18.190000\n37.496433\n127.028082\n\n\n3\n16.471220\n37.498106\n127.022192\n\n\n4\n22.450952\n37.500400\n127.018828\n\n\n\n\n\n\n\n\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaled_data = scaler.fit_transform(joined_gdf_3)\nscaled_df = pd.DataFrame(scaled_data, columns=joined_gdf_3.columns)\n\n\nkmeans = KMeans(n_clusters=4, random_state=42,n_init=10)\nkmeans.fit(scaled_df)\nlabels = kmeans.predict(scaled_df)\ncentroids = kmeans.cluster_centers_\n\njoined_gdf_3[\"label\"] = labels\njoined_gdf_3\n\n\n\n\n\n\n\n\nHEIGHT\nlat\nlon\nlabel\n\n\n\n\n0\n16.685000\n37.494394\n127.028372\n3\n\n\n1\n18.601481\n37.498114\n127.026919\n3\n\n\n2\n18.190000\n37.496433\n127.028082\n3\n\n\n3\n16.471220\n37.498106\n127.022192\n3\n\n\n4\n22.450952\n37.500400\n127.018828\n3\n\n\n5\n16.685000\n37.494399\n127.028329\n3\n\n\n6\n15.413061\n37.524714\n127.024854\n0\n\n\n7\n14.988200\n37.524144\n127.022466\n0\n\n\n8\n13.772666\n37.494475\n127.063235\n1\n\n\n9\n14.181333\n37.496052\n127.068492\n1\n\n\n10\n21.414546\n37.506400\n127.055012\n3\n\n\n11\n20.450417\n37.494020\n127.033451\n3\n\n\n12\n18.929487\n37.529062\n127.034439\n0\n\n\n13\n18.674390\n37.528394\n127.036788\n0\n\n\n14\n21.153250\n37.524246\n127.037206\n0\n\n\n15\n18.479355\n37.528181\n127.050339\n0\n\n\n16\n23.637895\n37.523765\n127.048436\n0\n\n\n17\n30.667600\n37.519166\n127.046670\n0\n\n\n18\n18.479355\n37.528181\n127.050339\n0\n\n\n19\n17.306829\n37.494290\n127.086173\n1\n\n\n20\n19.136098\n37.492741\n127.086205\n1\n\n\n21\n18.373846\n37.493352\n127.086506\n1\n\n\n22\n58.832963\n37.481378\n127.084280\n2\n\n\n23\n48.745610\n37.483459\n127.086705\n2\n\n\n24\n18.380588\n37.488482\n127.102176\n1\n\n\n25\n22.945000\n37.486758\n127.099563\n1\n\n\n26\n27.557143\n37.484353\n127.094982\n1\n\n\n\n\n\n\n\n\nk = 4\n\ncolor_dict = {0: 'blue', 1: 'green', 2: 'red', 3: 'black'}\n\nM = folium.Map(location=[37.50452, 127.055],\n                              zoom_start=13,tiles=\"Cartodb Positron\")\n\nfor idx, row in joined_gdf_3.iterrows():\n    cluster_idx = labels[idx]  # 데이터 포인트의 군집 인덱스\n    color = get_cluster_color(cluster_idx) \n\n    CircleMarker(location=[row['lat'], row['lon']],\n                 radius=3,\n                 tooltip=[row[\"HEIGHT\"]],  # 툴팁에 군집 인덱스 표시\n                 color=color_dict[row[\"label\"]],\n                 fill=True,\n                 fill_opacity=1,\n                 opacity=1\n                ).add_to(M)\n\n# Plot Centroids\nfor centroid in centroids:\n    folium.Marker(location=[centroid[0], centroid[1]],\n                  icon=folium.Icon(color='red', icon='info-sign')\n                 ).add_to(M)\n\nM\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\nk = 3\n\nkmeans = KMeans(n_clusters=3, random_state=42,n_init=10)\nkmeans.fit(scaled_df)\nlabels = kmeans.predict(scaled_df)\ncentroids = kmeans.cluster_centers_\ndef get_cluster_color(cluster_idx):\n    colors = ['red', 'green', 'blue', 'orange', 'purple', 'yellow', 'pink', 'cyan', 'magenta', 'gray']\n    return colors[cluster_idx % len(colors)]\n\nM = folium.Map(location=[37.50452, 127.055],\n                              zoom_start=13,tiles=\"Cartodb Positron\")\n\nfor idx, row in joined_gdf_2.iterrows():\n    cluster_idx = labels[idx]  # 데이터 포인트의 군집 인덱스\n    color = get_cluster_color(cluster_idx) \n\n    CircleMarker(location=[row['lat'], row['lon']],\n                 radius=3,\n                 tooltip=[row[\"HEIGHT\"]],  # 툴팁에 군집 인덱스 표시\n                 color=color,\n                 fill=True,\n                 fill_opacity=1,\n                 opacity=1\n                ).add_to(M)\n\n# Plot Centroids\nfor centroid in centroids:\n    folium.Marker(location=[centroid[0], centroid[1]],\n                  icon=folium.Icon(color='red', icon='info-sign')\n                 ).add_to(M)\n\nM\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nimport matplotlib.pyplot as plt\nk_range = range(1, 10)\ninertia = []\n\nfor k in k_range:\n    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)\n    kmeans.fit(scaled_df)\n    inertia.append(kmeans.inertia_)\n\nplt.plot(k_range, inertia, marker='o')\nplt.xlabel('Number of Clusters (k)')\nplt.ylabel('Inertia')\nplt.title('Elbow Method for Optimal k')\nplt.xticks(k_range)\nplt.show()"
  },
  {
    "objectID": "posts/군집화하기_ver2.html#박스높이-포함-군집화",
    "href": "posts/군집화하기_ver2.html#박스높이-포함-군집화",
    "title": "군집화",
    "section": "박스높이 포함 군집화",
    "text": "박스높이 포함 군집화\n\njoined_gdf_4 = joined_gdf_2.loc[:,[\"HEIGHT\",\"lat\",\"lon\",\"박스높이(m)\"]]\njoined_gdf_4.head()\n\n\n\n\n\n\n\n\nHEIGHT\nlat\nlon\n박스높이(m)\n\n\n\n\n0\n16.685000\n37.494394\n127.028372\n2.0\n\n\n1\n18.601481\n37.498114\n127.026919\n3.0\n\n\n2\n18.190000\n37.496433\n127.028082\n2.5\n\n\n3\n16.471220\n37.498106\n127.022192\n3.0\n\n\n4\n22.450952\n37.500400\n127.018828\n4.4\n\n\n\n\n\n\n\n\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaled_data_2 = scaler.fit_transform(joined_gdf_4)\nscaled_df_2 = pd.DataFrame(scaled_data_2, columns=joined_gdf_4.columns)\n\n\nk = 3\n\nkmeans = KMeans(n_clusters=3, random_state=42,n_init=10)\nkmeans.fit(scaled_df_2)\nlabels = kmeans.predict(scaled_df_2)\ncentroids = kmeans.cluster_centers_\n\njoined_gdf_4[\"label\"] = labels\njoined_gdf_4\ncolor_dict = {0: 'blue', 1: 'green', 2: 'red', 3: 'black'}\n\nM = folium.Map(location=[37.50452, 127.055],\n                              zoom_start=13,tiles=\"Cartodb Positron\")\n\nfor idx, row in joined_gdf_4.iterrows():\n    cluster_idx = labels[idx]  # 데이터 포인트의 군집 인덱스\n    color = get_cluster_color(cluster_idx) \n\n    CircleMarker(location=[row['lat'], row['lon']],\n                 radius=3,\n                 tooltip=[row[\"HEIGHT\"]],  # 툴팁에 군집 인덱스 표시\n                 color=color_dict[row[\"label\"]],\n                 fill=True,\n                 fill_opacity=1,\n                 opacity=1\n                ).add_to(M)\n\n# Plot Centroids\nfor centroid in centroids:\n    folium.Marker(location=[centroid[0], centroid[1]],\n                  icon=folium.Icon(color='red', icon='info-sign')\n                 ).add_to(M)\n\nM\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\nk = 4\n\nkmeans = KMeans(n_clusters=4, random_state=42,n_init=10)\nkmeans.fit(scaled_df_2)\nlabels = kmeans.predict(scaled_df_2)\ncentroids = kmeans.cluster_centers_\n\njoined_gdf_4[\"label\"] = labels\njoined_gdf_4\ncolor_dict = {0: 'blue', 1: 'green', 2: 'red', 3: 'black'}\n\nM = folium.Map(location=[37.50452, 127.055],\n                              zoom_start=13,tiles=\"Cartodb Positron\")\n\nfor idx, row in joined_gdf_4.iterrows():\n    cluster_idx = labels[idx]  # 데이터 포인트의 군집 인덱스\n    color = get_cluster_color(cluster_idx) \n\n    CircleMarker(location=[row['lat'], row['lon']],\n                 radius=3,\n                 tooltip=[row[\"HEIGHT\"]],  # 툴팁에 군집 인덱스 표시\n                 color=color_dict[row[\"label\"]],\n                 fill=True,\n                 fill_opacity=1,\n                 opacity=1\n                ).add_to(M)\n\n# Plot Centroids\nfor centroid in centroids:\n    folium.Marker(location=[centroid[0], centroid[1]],\n                  icon=folium.Icon(color='red', icon='info-sign')\n                 ).add_to(M)\n\nM\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\nk = 5\n\nkmeans = KMeans(n_clusters=5, random_state=42,n_init=10)\nkmeans.fit(scaled_df_2)\nlabels = kmeans.predict(scaled_df_2)\ncentroids = kmeans.cluster_centers_\n\njoined_gdf_4[\"label\"] = labels\njoined_gdf_4\ncolor_dict = {0: 'blue', 1: 'green', 2: 'red', 3: 'black', 4: 'yellow'}\n\nM = folium.Map(location=[37.50452, 127.055],\n                              zoom_start=13,tiles=\"Cartodb Positron\")\n\nfor idx, row in joined_gdf_4.iterrows():\n    cluster_idx = labels[idx]  # 데이터 포인트의 군집 인덱스\n    color = get_cluster_color(cluster_idx) \n\n    CircleMarker(location=[row['lat'], row['lon']],\n                 radius=3,\n                 tooltip=[row[\"HEIGHT\"]],  # 툴팁에 군집 인덱스 표시\n                 color=color_dict[row[\"label\"]],\n                 fill=True,\n                 fill_opacity=1,\n                 opacity=1\n                ).add_to(M)\n\n# Plot Centroids\nfor centroid in centroids:\n    folium.Marker(location=[centroid[0], centroid[1]],\n                  icon=folium.Icon(color='red', icon='info-sign')\n                 ).add_to(M)\n\nM\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nimport matplotlib.pyplot as plt\nk_range = range(1, 10)\ninertia = []\n\nfor k in k_range:\n    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)\n    kmeans.fit(scaled_df_2)\n    inertia.append(kmeans.inertia_)\n\nplt.plot(k_range, inertia, marker='o')\nplt.xlabel('Number of Clusters (k)')\nplt.ylabel('Inertia')\nplt.title('Elbow Method for Optimal k')\nplt.xticks(k_range)\nplt.show()"
  },
  {
    "objectID": "posts/군집화하기_ver2.html#하수구-위경도만으로-군집화",
    "href": "posts/군집화하기_ver2.html#하수구-위경도만으로-군집화",
    "title": "군집화",
    "section": "",
    "text": "import pandas as pd\nimport geopandas as gpd\nfrom sklearn.cluster import KMeans\nimport folium\nfrom folium import CircleMarker\nfrom shapely.geometry import Point\n\ndata_raw = pd.read_csv(\"/home/sungil/Income_pred_Dacon/PersonalProj/완_하수구_위치_정보.csv\")\ndata = data_raw[[\"lat\",\"lon\"]].copy()\n\ngeometry = [Point(lon, lat) for lon, lat in zip(data_raw['lon'], data_raw['lat'])]\n\ndata_raw = gpd.GeoDataFrame(data_raw, geometry=geometry)\n\ndata_raw.crs= 'EPSG:4326'\ndata_raw.head()\n\n\n\n\n\n\n\n\n수위계번호\n수위계 설치지점\n박스높이(m)\nlat\nlon\ngeometry\n\n\n\n\n0\n23-0001\n강남구 압구정로20길 6앞 맨홀&lt;심덕빌딩(최용섭피부과)앞~백상빌딩간 횡단보도내&gt;\n2.0\n37.524714\n127.024854\nPOINT (127.02485 37.52471)\n\n\n1\n23-0002\n강남구 압구정로128앞 맨홀(신사동주민센터앞 횡단보도내, 현대고 서측정문앞)\n2.0\n37.524144\n127.022466\nPOINT (127.02247 37.52414)\n\n\n2\n23-0003\n강남구 남부순환로2947앞(대원빌딩앞 횡단보도내, 대치역사거리)\n2.5\n37.494475\n127.063235\nPOINT (127.06324 37.49448)\n\n\n3\n23-0004\n강남구 삼성로212앞 맨홀(은마아파트1동~미도아파트208동간,중안차로 안전지대내)\n2.5\n37.496052\n127.068492\nPOINT (127.06849 37.49605)\n\n\n4\n23-0005\n테헤란로435앞 맨홀(대종빌딩~삼영빌딩간 횡단보도앞 테헤란로측)\n2.5\n37.506400\n127.055012\nPOINT (127.05501 37.50640)\n\n\n\n\n\n\n\n\nkmeans = KMeans(n_clusters=4, random_state=42,n_init=10)\nkmeans.fit(data)\nlabels = kmeans.predict(data)\ncentroids = kmeans.cluster_centers_\ndef get_cluster_color(cluster_idx):\n    colors = ['red', 'green', 'blue', 'orange', 'purple', 'yellow', 'pink', 'cyan', 'magenta', 'gray']\n    return colors[cluster_idx % len(colors)]\n\nM = folium.Map(location=[37.50452, 127.055],\n                              zoom_start=13,tiles=\"Cartodb Positron\")\n\nfor idx, row in data_raw.iterrows():\n    cluster_idx = labels[idx]  # 데이터 포인트의 군집 인덱스\n    color = get_cluster_color(cluster_idx) \n\n    CircleMarker(location=[row['lat'], row['lon']],\n                 radius=3,\n                 tooltip=row[\"수위계번호\"],  # 툴팁에 군집 인덱스 표시\n                 color=color,\n                 fill=True,\n                 fill_opacity=1,\n                 opacity=1\n                ).add_to(M)\n\n# Plot Centroids\nfor centroid in centroids:\n    folium.Marker(location=[centroid[0], centroid[1]],\n                  icon=folium.Icon(color='red', icon='info-sign')\n                 ).add_to(M)\n\nM\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nimport matplotlib.pyplot as plt\nk_range = range(1, 10)\ninertia = []\n\nfor k in k_range:\n    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)\n    kmeans.fit(data)\n    inertia.append(kmeans.inertia_)\n\nplt.plot(k_range, inertia, marker='o')\nplt.xlabel('Number of Clusters (k)')\nplt.ylabel('Inertia')\nplt.title('Elbow Method for Optimal k')\nplt.xticks(k_range)\nplt.show()"
  }
]